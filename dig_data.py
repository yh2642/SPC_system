import osfrom sqlite3 import dbapi2 as sqlite3from flask import Flask, request, session, g, redirect, url_for, abort, render_template, flashfrom sql_functions import namematch_id, id_match_history, priceinfo_list, input_batchimport sql_functions as sqlimport pandas as pdfrom pricelist import add_list, load_list, modify_item, remove_itemfrom werkzeug import secure_filenameimport refrom clean_functions import data_clean, process2product, process2history, import2product, import2historyimport numpy as npfrom process_raw_data import processdata, clean_linefrom io import StringIOimport matplotlib.pyplot as pltfrom batchclass import Batchfrom datetime import datetimefrom historyclass import Historyimport spc_listimport pickle from regression import *from scipy.stats import ttest_ind, leveneQT = {7:2.446912, 8:2.446912, 9: 2.364624, 10 :2.306004, 11: 2.262157, 12:2.228139, 13: 2.200985, 14: 2.178813, 15: 2.160369, 16 : 2.144787, 17 : 2.13145}def dig_data(n):	raw_data = "static/raw_data/temp_files.txt"	fr = open(raw_data)	data = fr.readlines()	fr.close()	data2 = processdata(data, year = '2014')	teststr = ""	pclist = []	for ele in data2:		temp_batch = Batch(ele)		init_pressure = 't' + temp_batch.outpressure		temp_records = temp_batch.records		temp_records.insert(0, init_pressure)		if ele[4] == 1:			temp_records.insert(0, 'switch')		pclist.append(temp_records)	gather_list = []	templist = []	for ele in pclist:		if 'switch' in ele:			gather_list.append(templist)			templist = []			templist.extend(ele)			templist.remove('switch')		else:			templist.extend(ele)	gather_list.pop(0)	raw_data = "static/raw_data/15.4-3.3(mod).txt"	fr = open(raw_data)	data = fr.readlines()	fr.close()	cleanls = []	temp_store_check = []	for line in data:		line = line.strip().split()		doneline = []		for ele in line:			if ('t' not in ele) and ('j' not in ele) and '/' not in ele and ele not in ['m', 'l', 'switch']:				doneline.append('3.' + ele)				if len(temp_store_check) > 0:					doneline.extend(temp_store_check)					temp_store_check = []			elif '/' in ele:				temp_store_check.append('/' + '3.' + ele[1: ])			else:				doneline.append(ele)		if 'switch' in doneline:			doneline.remove('switch')		cleanls.append(doneline)		gather_list.extend(cleanls)					new_key = []	for line in gather_list:		last_t = ''		temp_line = []		new_list = []		for ele in line:			if 't' in ele:				if ele == last_t:					pass				else:					if 'switch' in temp_line:						temp_line.remove('switch')					if len(temp_line) > 0:						new_list.append(temp_line)					temp_line = []					temp_line.append(ele)					last_t = ele								else:				temp_line.append(ele)		new_list.append(temp_line)		new_key.append(new_list)	#new_key.pop(0)	#new_key.pop()  	df1 = output_df(new_key, n)		return df1	'''	collect_sample = []	std_dev_set = []	n = 0	count_l = 0	count_std = 0	for subline in gather_list:		#for subline in line:		temp_sample = []		for indx in range(len(subline)):			try:				x = float(subline[indx])				if len(temp_sample) > 0:									check_set2 = temp_sample[-1]					sd2 = np.std(check_set2)										check_set3 = list(temp_sample[-1])					check_set3.append(float(subline[indx]))					sd3 = np.std(check_set3)					count_std += 1					std_dev_set.append(sd3 - sd2)										if len(temp_sample) == 2:						count_std += 1						check_set1 = list(temp_sample[-1])						check_set1.append(temp_sample[0])						sd1 = np.std(check_set1)						std_dev_set.append(sd1 - sd2)																temp_sample.append(float(subline[indx]))					collect_sample.append(temp_sample)					n += 1					temp_sample = []			except ValueError:				if '/' in subline[indx] and len(temp_sample) == 0:					count_l += 1					if subline[indx - 2] not in ['m', 'l']  and '/' not in subline[indx-2] and 't' not in subline[indx - 2]:						temp_sample.append(float(subline[indx - 2]))												#if 't' in subline[indx - 1] or subline[indx - 1] in ['m', 'l']:						#	temp_sample.append([subline[indx]])											temp_sample.append([float(subline[indx - 1]), float(subline[indx][1:])])				elif '/' in subline[indx] and len(temp_sample) > 0:					count_l += 1					temp_sample[len(temp_sample) - 1].append(float(subline[indx][1:]))	print n		print count_l					'''		"""		temp_pair.mean_valid()						if temp_pair.get_pressure_dev() > 0:					pressure_larger.append(temp_pair.get_pressure_dev())					result_for_larger3.append(temp_pair.get_sample_means_dev(3))					result_for_larger5.append(temp_pair.get_sample_means_dev(5))					result_for_larger8.append(temp_pair.get_sample_means_dev(8))					result_for_larger10.append(temp_pair.get_sample_means_dev(10))					result_for_larger20.append(temp_pair.get_sample_means_dev(20))				else:					pressure_smaller.append(temp_pair.get_pressure_dev())					result_for_smaller3.append(temp_pair.get_sample_means_dev(3))					result_for_smaller5.append(temp_pair.get_sample_means_dev(5))					result_for_smaller8.append(temp_pair.get_sample_means_dev(8))					result_for_smaller10.append(temp_pair.get_sample_means_dev(10))					result_for_smaller20.append(temp_pair.get_sample_means_dev(20))		"""						#data_dict2 = {'pressure_dev':pressure_smaller, '3s':result_for_smaller3, '5s':result_for_smaller5, 	#				'8s':result_for_smaller8, '10s':result_for_smaller10, '20s':result_for_smaller20}			#df2 = pd.DataFrame(data_dict2, columns = ['pressure_dev', '3s', '5s', '8s', '10s', '20s'])		def output_df(new_key, n):	initial_pressure = []	step_before = []	step_after = []		pressure_larger = []	reason_mean = []	step_mean_dev = []	p_value = []	sample_size = []	levene = []	t_value = []	wt_index = []	result_for_larger3 = []	best_show = []	result_for_larger5 = []	result_for_larger8 = []	result_for_larger10 = []	result_for_larger20 = []	mean_after10 = []	"""	pressure_smaller =[]	result_for_smaller3 =[]	result_for_smaller5 =[]	result_for_smaller8 =[]       	result_for_smaller10 =[] temp_pair.mean_valid(5)	result_for_smaller20 =[]  temp_pair.mean_valid(5)	"""	for ele in new_key:		if len(ele) == 0:			print "!!!!", ele			pass		else:			for indx in range(1, len(ele)):				temp_pair = Pressure_pair(ele[indx-1], ele[indx])				if temp_pair.mean_valid(5):					pressure_larger.append(temp_pair.get_pressure_dev())					reason_mean.append(temp_pair.get_reason_mean(n))					initial_pressure.append(temp_pair.pressure1)					p_value.append(temp_pair.caluate_p_value(n))					t_value.append(temp_pair.caluate_t_value(n))					wt_index.append(temp_pair.caluate_wt_index(n))					sample_size.append(temp_pair.get_sample_size(n))					levene.append(temp_pair.get_levene(20))					step_before.append(temp_pair.get_step_mean()[0])					step_after.append(temp_pair.get_step_mean()[1])					#result_for_larger3.append(temp_pair.get_sample_means_dev(3, n1 = 5))					mean_after10.append(temp_pair.get_sample_means(10)[1])										result_for_larger5.append(temp_pair.get_sample_means_dev(5))					result_for_larger8.append(temp_pair.get_sample_means_dev(8, n1 = 5))					result_for_larger10.append(temp_pair.get_sample_means_dev(10, n1 = 5))										result = [result_for_larger5[-1], result_for_larger8[-1], result_for_larger10[-1]]					temp_largest = 0					for item in result:						if abs(item) > abs(temp_largest):							temp_largest = item					best_show.append(temp_largest)															#result_for_larger20.append(temp_pair.get_sample_means_dev(20))	data_dict1 = {'pressure_dev':pressure_larger, 'initial_pressure':initial_pressure, '3s':result_for_larger3, 'sample_size':sample_size, 'levene':levene, 'best_show' : best_show,					'5s':result_for_larger5, '8s':result_for_larger8, '10s':result_for_larger10, 					'step_mean_dev': step_mean_dev, '20s':result_for_larger20, 'p_value' : p_value, 't_value' : t_value,					'wt_index' : wt_index, 'reason_mean' : reason_mean, 'step_before':step_before, 'step_after':step_after, 'mean_after10': mean_after10}		df1 = pd.DataFrame(data_dict1, columns = ['initial_pressure', 'pressure_dev', 'best_show', '5s', '8s', '10s', 'p_value', 't_value', 'levene', 'step_before', 'step_after', 'mean_after10', 'sample_size', 'reason_mean', 'wt_index'])			return df1	## statistical inference			class Pressure_pair:	def __init__(self, line1, line2):		self.pressure1 = float(line1[0][1:])		self.pressure2 = float(line2[0][1:])		self.records1 = line1[1:]		self.records2 = line2[1:]		print self.pressure1, self.pressure2			def ___str___(self):		ans = 'The pressure change from %f to %f' % (self.pressure1, self.pressure2)		ans = '\r'		ans = 'which enhance the mean about %f ' % self.get_means_dev()		return ans		def get_pressure_dev(self):		return self.pressure2 - self.pressure1			def get_pressure_abs_dev(self):		return abs(self.get_pressure_dev())			def get_changer(self):				if self.get_pressure_dev() > 0:			return 1		else:			return 0					def get_records1(self):		positive_records = []		for ele in self.records1:			if ele in ['m', 'l']:				if len(positive_records) > 0:					positive_records.pop()					elif '/' in ele:				positive_records.append(ele)					else: 				positive_records.append(float(ele))		return positive_records				def get_records2(self):		positive_records = []		for ele in self.records2:			if ele in ['m', 'l']:				if len(positive_records) > 0:					positive_records.pop()				elif '/' in ele:				positive_records.append(ele)						else: 				positive_records.append(float(ele))		return positive_records			def get_sample(self, n2, n1 = 5):		record1 = self.get_records1()		record2 = self.get_records2()		sample1 = self.find_check_value(n1, record1, dim = -1)		sample2 = self.find_check_value(n2, record2, dim = 1)		return sample1, sample2		#if len(record1) <= 5:		#	sample1 = record1		#else:		#	sample1 = record1[-5:]					#if len(record2) <= n:		#	sample2 = record2		#else:		#	sample2 = record1[:n]		#return sample1, sample2			def find_check_value(self, n, record, dim = 1):		re_sample = 0		sample_list = []		for indx in range(dim, dim * len(record), dim):			if type(record[indx]) is float:				re_sample += 1				sample_list.append(record[indx])			elif '/' in str(record[indx]):				sample_list.append(float(record[indx][1:]))			if re_sample >= n:				return sample_list		return sample_list			def get_sample_means(self, n2, n1 = 5):		sample1, sample2 = self.get_sample(n2, n1)		return np.mean(sample1), np.mean(sample2)			def get_sample_means_dev(self, n2, n1 = 5):		mean1, mean2 = self.get_sample_means(n2, n1)		return mean2 - mean1			def get_sample_stds(self, n):		sample1, sample2 = self.get_sample(n)		return np.std(sample1), np.std(sample2)			def get_means(self):		return np.mean(self.get_records1()), np.mean(self.get_records2())	def get_means_dev(self):		return self.get_means()[1] - self.get_means()[0]	def get_stds(self):		return np.std(self.get_records1()), np.std(self.get_records2())		def get_sample_size(self, n):		sample1, sample2 = self.get_sample(n)				n1 = len(sample1); n2 = len(sample2)		return n1 + n2			def get_levene(self, n):		sample1, sample2 = self.get_sample(n)		p = levene(sample1, sample2)[1]		return p		def caluate_wt_index(self, n):				s1, s2 = self.get_sample_stds(n)		#print 'std', s1, s2		sample1, sample2 = self.get_sample(n)				n1 = len(sample1); n2 = len(sample2)		#print 'n1', n1, 'n2', n2		Sp = ((n1 - 1)*(s1 ** 2)+ (n2 - 1)*(s2 ** 2)) / (n1 + n2 - 2)		#print "Sp", Sp		stand_error = np.sqrt(1.0/n1 + 1.0/n2)  #Sp * 		#print 'Standard Error', stand_error		deltaT = QT[n1 + n2] * stand_error		return  deltaT 					def caluate_p_value(self, n):		mean_dev = self.get_sample_means_dev(n)		s1, s2 = self.get_sample_stds(n)		sample1, sample2 = self.get_sample(n)				n1 = len(sample1); n2 = len(sample2)		p_value = ttest_ind(sample1, sample2)[1]				return p_value      # / self.get_pressure_abs_dev()			def caluate_t_value(self, n):		mean_dev = self.get_sample_means_dev(n)		s1, s2 = self.get_sample_stds(n)		sample1, sample2 = self.get_sample(n)				n1 = len(sample1); n2 = len(sample2)		t_value = ttest_ind(sample1, sample2)[0]				return t_value		def get_step_pool(self, records):		test_sample = records		step_pool = []		for indx in range(1, len(test_sample)):			single_step = abs(test_sample[indx] - test_sample[indx - 1])			step_pool.append(single_step)		return step_pool			def get_step_mean(self):		sample1, sample2 = self.get_sample(3)		step_mean_before = np.mean(self.get_step_pool(sample1))		step_mean_after = np.mean(self.get_step_pool(sample2))		return step_mean_before, step_mean_after			def mean_valid(self, n):		len_sample = len(self.get_sample(n)[0])		#sample_near = self.get_sample(n)[0]		mean_near_before = self.get_sample_means(n)[0]		mean_before = np.mean(self.get_pure_float_record1()[:-len_sample])		if (mean_near_before - mean_before) * self.get_pressure_dev() > 0:			return True		else:			return False		def get_pure_float_record1(self):		'''		the function is only used in the next method in order to get pure float data		'''		new_list =[]		records1 = self.get_records1()		for ele in records1:			if type(ele) is float:				new_list.append(ele)			else:				new_list.append(float(ele[1:]))		return new_list	def get_reason_mean(self, n):		len_sample = len(self.get_sample(3)[0])		mean_near_before = self.get_sample_means(3)[0]		mean_norm = np.mean(self.get_pure_float_record1()[:-len_sample])		return abs(mean_near_before - mean_norm) / self.get_pressure_abs_dev()		#def get_step_sum(self, step_pool):									#with open('static/raw_data/pressure_data.txt', 'wb') as pressurelist:#	pickle.dump(gather_list, pressurelist)#with open('static/raw_data/pressure_data.txt', 'rb') as pricelist:#	try:#		pklist = pickle.load(pricelist)#	except EOFError: #		pass#x, y = dig_data()		#plt.scatter(x, y, color='DarkGreen', alpha = 0.3)		def test_corr(td):	print 'count', len(td)	print 'best_show', td.pressure_dev.corr(td['best_show'])	print '5s', td.pressure_dev.corr(td['5s'])	print '8s', td.pressure_dev.corr(td['8s'])	print '10s', td.pressure_dev.corr(td['10s'])def qk_plot(td):	plt.scatter(td.pressure_dev, td.best_show, alpha = 0.5)	plt.show()	def compare_plot(td1, td2):	fig = plt.figure()	ax1= fig.add_subplot(211)	ax2= fig.add_subplot(212)	ax1.scatter(td1.pressure_dev, td1.best_show, color='DarkGreen', alpha = 0.3)	ax2.scatter(td2.pressure_dev, td2.best_show, color='DarkBlue', alpha = 0.3)	plt.show()##########################################################td = dig_data(5)   # first 260 cor -0.25, 103 corr 0.40'''count 258best_show -0.6267365998255s -0.6021293907558s -0.6213029614610s -0.632405292582'''  td1 = td[td['pressure_dev'] * td['best_show'] < 0] '''In [68]: test_corr(td1)count 233best_show -0.7172834115915s -0.6774250373038s -0.69968422421510s -0.709445578209'''td1['effect_index'] =abs(td1['best_show'] /td1.pressure_dev)td2 = td1[(((td1.reason_mean > td1.reason_mean.quantile(0.3)) & (td1.reason_mean < td1.reason_mean.quantile(0.7))) & 			((td1.effect_index >  td1.effect_index.quantile(.25)) & (td1.effect_index <  td1.effect_index.quantile(.6)))) | (td1.levene > 0.05)]'''td1[(((td1.reason_mean < td1.reason_mean.quantile(0.3)) | (td1.reason_mean > td1.reason_mean.quantile(0.7))) | 			((td1.effect_index <  td1.effect_index.quantile(.25)) & (td1.effect_index >  td1.effect_index.quantile(.6)))) & (td1.levene < 0.05)]In [104]: test_corr(td2)count 219best_show -0.7169389112775s -0.6787050631538s -0.70045457084810s -0.71165493378'''td2['pattern1x'] = abs(td2.best_show)td2['pattern1y'] = abs(td2.step_before - td2.step_after)### waiting for testing'''td4 = td3[(td3.pressure_dev <= 1) & (td3.pressure_dev >= -1)]td4 = td3[(td3.pressure_dev > 1) | (td3.pressure_dev < -1)]'''			td3 = td2[(((td2.reason_mean > td2.reason_mean.quantile(0.2)) & (td2.reason_mean < td2.reason_mean.quantile(0.8))) | 			((td2.effect_index >  td2.effect_index.quantile(.2)) & (td2.effect_index <  td2.effect_index.quantile(.75)))) | (td2.step_before < td2.step_before.quantile(0.6)) | (td2.step_after < td2.step_after.quantile(0.65))]		'''td2[((td2.reason_mean < td2.reason_mean.quantile(0.2)) | (td2.reason_mean > td2.reason_mean.quantile(0.8))) & 			((td2.effect_index <  td2.effect_index.quantile(.2)) | (td2.effect_index > td2.effect_index.quantile(.8))) & 			(td2.step_before > td2.step_before.quantile(0.6)) & (td2.step_after > td2.step_after.quantile(0.65))]In [177]: test_corr(td3)count 205best_show -0.7370194889955s -0.6986484477378s -0.71938013532110s -0.729939337881'''td4 = td3[(td3.effect_index > 0.11) | (abs(td3.pressure_dev) <= 1)]'''In [61]: test_corr(td4[(td4.effect_index > 0.11) | (abs(td4.pressure_dev) <= 1)])count 192best_show -0.8169512007555s -0.7753617368578s -0.80258506768210s -0.811924306872'''	td4['wt'] = 1/td4.wt_indextd4['wt'] = td4.wt / td4.wt.mean()td4['mean_step'] = (td4.step_before + td4.step_after) / 2td4.mean_step = 1/td4.mean_steptd4.mean_step = td4.mean_step / td4.mean_step.mean()td4['wt1'] = ((1.0/2) * td4.mean_step) + ((1.0/2) * td4.wt)'''df2 = df1[df1['pressure_dev'] * df1['3s'] < 0]   # <= 79 corr: 0.56  < 78 corr: 0.58df3 = df2[df2['pressure_dev'] * df2['5s'] < 0]  # <= 77 corr: 0.58   < 73 corr: 0.59df3['effect_index'] =abs((df3['3s'] + df3['5s'] + df3['8s'])/(3 * df3.pressure_dev))df4 = df3[df3.effect_index > 0.08]  # 69 corr 0.68df6 = df4[df4.effect_index < 0.8]  # 55 corr 0.80#df6 = df5[df5.step_mean_dev<0.08]      # 0.975 dele'''td4['intercept'] = 1col1 = ['intercept', 'best_show', 'pressure_dev']td5 = td4.reindex(columns = col1)xArr, yArr = loadDataSet(td5)ws = standRegres(xArr, yArr)xMat = mat(xArr); yMat = mat(yArr);# find and plot linar regression linefig = plt.figure()ax1 = fig.add_subplot(311)ax1.scatter(xMat[:, 1].flatten().A[0], yMat.T[:, 0].flatten().A[0], color='DarkGreen', alpha = 0.2)xCopy = xMat.copy()xCopy.sort(0)yHat = xCopy*wsax1.plot(xCopy[:, 1], yHat)# plt.show()# LWLRyHat2 = lwlrTest(xArr, xArr, yArr, 0.1)xMat = mat(xArr)sortInd = xMat[:, 1].argsort(0)xSort = xMat[sortInd][:, 0, :]ax2 = fig.add_subplot(312)ax2.plot(xSort[:, 1], yHat2[sortInd])ax2.scatter(xMat[:, 1].flatten().A[0], mat(yArr).T.flatten().A[0], color='DarkBlue', alpha = 0.2)# LWLR + WeightedwArr = td4.wt1.valuesprint wArryHat3 = WlwlrTest(xArr, xArr, yArr, wArr, 0.5)xMat = mat(xArr)sortInd = xMat[:, 1].argsort(0)xSort = xMat[sortInd][:, 0, :]ax3 = fig.add_subplot(313)ax3.plot(xSort[:, 1], yHat3[sortInd])ax3.scatter(xMat[:, 1].flatten().A[0], mat(yArr).T.flatten().A[0], color='DarkRed', alpha = 0.2)plt.show()plt.savefig('static/analysis_images/linear_regression_line_inverse.png')