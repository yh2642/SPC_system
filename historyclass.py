# -*- coding: utf-8 -*-import pandas as pdimport numpy as npimport osimport matplotlib.pyplot as pltimport sql_functions as sqlimport matplotlib.mlab as mlabimport datetimefrom matplotlib.dates import DayLocator, MonthLocator, DateFormatterclass History:	def __init__(self, startdate, enddate, batchtype):		self.startdate = startdate		self.batchtype = batchtype		self.enddate = enddate		self.db = sql.output_history(self.startdate, self.enddate, self.batchtype)		self.means = self.db.means		self.stds = self.db.stds		self.ranges = self.db.ranges		self.maxs = self.db.maxs		self.mins = self.db.mins		self.pressure = self.db.outpressure					def data_groupby_day(self):		col = ['date', 'batchID', 'means', 'stds', 'maxs', 'mins', 'ranges', 'step_mean']		stat_data = self.db.reindex(columns = col)				grouped_mean = stat_data['means'].groupby(stat_data['date'])		means_by_day = grouped_mean.mean()				grouped_std = stat_data['stds'].groupby(stat_data['date'])		stds_by_day = grouped_std.mean()				grouped_range = stat_data['step_mean'].groupby(stat_data['date'])		ranges_by_day = grouped_range.mean()				date = sql.history_select_date(list(means_by_day.index))				means_date = pd.DataFrame(means_by_day, columns = ['means'])		means_date['date'] = date		means_date['stds'] = list(stds_by_day)		means_date['step_mean'] = list(ranges_by_day)				means_date = means_date.sort(columns = 'date')				fig, ax = plt.subplots(2, 2, sharex = True)		#ax1= fig.add_subplot(2, 2, 1)				#ax2= fig.add_subplot(2, 2, 2)		#ax3 = fig.add_subplot(2, 2, 3)		# ax4 = fig.add_subplot(2, 2, 4)		ax[0, 0].plot(list(means_date.date), list(means_date.means), color='DarkGreen', linestyle='dashed', marker='', alpha = 0.5)				ax[0, 1].plot(list(means_date.date), list(means_date.stds), color='DarkBlue', linestyle='dashed', marker='', alpha = 0.5)				ax[1, 0].plot(list(means_date.date), list(means_date.step_mean), color = 'DarkRed', linestyle='dashed', marker='', alpha = 0.5)						ax[0, 0].set_ylabel(u'日平均爆破压力', fontproperties='SimHei')		ax[0, 1].set_ylabel(u'日平均偏差', fontproperties='SimHei')		ax[1, 0].set_ylabel(u'日平均极差', fontproperties='SimHei')		ax[1, 1].set_ylabel(u'日平均预警次数', fontproperties='SimHei')		ax[1, 0].set_xlabel(u'日期', fontproperties='SimHei')		ax[1, 1].set_xlabel(u'日期', fontproperties='SimHei')		ax[1, 1].xaxis.set_major_formatter(DateFormatter('%m.%d') ) 		ax[1, 1].xaxis.set_major_locator(DayLocator([1, 15])) 		plt.subplots_adjust(wspace = 0.3, hspace = 0.1)		plt.xlim(sql.history_select_date([self.startdate, self.enddate]))			filename = 'static/images/history_hist/' + self.startdate + '_' + self.enddate + '__group_plot.png'		if os.path.exists(filename):			os.remove(filename)		plt.savefig(filename)		plt.close('all')		return filename			def get_raw_test_hist(self):		all_test = list(self.db.text)		all_string = ''		for ele in all_test:			all_string += ele			all_string += ' '		all_list = all_string.strip().split()		result_list = [float(ele) + 0.05 * np.random.random() for ele in all_list if ('3.' in ele or '4.' in ele) and '/' not in ele]		mu = pd.Series(result_list).mean() # mean of distribution		sigma = pd.Series(result_list).std() # standard deviation of distribution		x = mu + sigma * np.random.randn(len(result_list))		num_bins = 30		# the histogram of the data		n, bins, patches = plt.hist(result_list, num_bins, normed=1, facecolor='green', alpha=0.5)		# add a 'best fit' line		y = mlab.normpdf(bins, mu, sigma)		plt.plot(bins, y, 'r--')		# plt.hist(x, num_bins, normed=1, facecolor='green', alpha=0.1)		plt.xlabel(u'单片抽检爆破压力', fontproperties='SimHei')		plt.ylabel(u'概率分布', fontproperties='SimHei')		plt.title(r'Histogram of IQ: $\mu=%f$, $\sigma=%f$' % (mu, sigma))		# Tweak spacing to prevent clipping of ylabel		plt.subplots_adjust(left=0.15)		filename = 'static/images/history_hist/' + self.startdate + '_' + self.enddate + '__test_hist.png'		if os.path.exists(filename):			os.remove(filename)		plt.savefig(filename)		plt.close('all')		return filename			def history_hist_subplot(self):		fig = plt.figure()		ax1= fig.add_subplot(2, 2, 1)				ax2= fig.add_subplot(2, 2, 2)		ax3 = fig.add_subplot(2, 2, 3)		ax4 = fig.add_subplot(2, 2, 4)		ax1.hist(self.means, bins = 20, normed = 1, color='DarkGreen', alpha = 0.3)		ax2.hist(self.stds, bins = 20, color='DarkBlue', alpha = 0.3)		ax3.hist(self.ranges, color = 'DarkRed', alpha = 0.3)		ax1.set_xlabel(u'日平均爆破压力', fontproperties='SimHei')		ax2.set_xlabel(u'日平均偏差', fontproperties='SimHei')		ax3.set_xlabel(u'日平均波动范围', fontproperties='SimHei')		ax4.set_xlabel(u'日平均预警次数', fontproperties='SimHei')		filename = 'static/images/history_hist/' + self.startdate + '_' + self.enddate + '__histsubplot.png'		if os.path.exists(filename):			os.remove(filename)		plt.savefig(filename)		plt.close('all')		return filename			def history_scatter_subplot(self):		fig = plt.figure()		ax1= fig.add_subplot(2, 2, 1)		ax2= fig.add_subplot(2, 2, 2)		ax3 = fig.add_subplot(2, 2, 3)		ax4 = fig.add_subplot(2, 2, 4)		all_pressure = self.pressure		if 'NULL' in list(all_pressure):			all_pressure = all_pressure.replace('NULL', np.nan)		outpressure = [float(ele) for ele in list(all_pressure)]		all_means = list(self.means)		all_std = list(self.stds)		all_range = list(self.ranges)		ax1.scatter(all_means, all_std, color='DarkGreen', alpha = 0.3)		ax2.scatter(all_means, all_range, color='DarkBlue', alpha = 0.3)		ax3.scatter(outpressure, all_means, color = 'DarkRed', alpha = 0.3)		ax4.scatter(outpressure, all_std, color = 'Black', alpha = 0.3)		ax1.set_xlabel(u'单批平均爆破压力', fontproperties='SimHei')		ax1.set_ylabel(u'单批平均偏差', fontproperties='SimHei')		ax2.set_ylabel(u'单批波动范围', fontproperties='SimHei')		ax2.set_xlabel(u'单批平均爆破压力', fontproperties='SimHei')		ax3.set_ylabel(u'单批平均爆破压力', fontproperties='SimHei')		ax3.set_xlabel(u'单批机床压力', fontproperties='SimHei')		ax4.set_xlabel(u'单批机床压力', fontproperties='SimHei')		ax4.set_ylabel(u'单批标准偏差', fontproperties='SimHei')		plt.subplots_adjust(wspace = 0.3, hspace = 0.1)				filename = 'static/images/history_hist/' + self.startdate + '_' + self.enddate + '__subplot.png'		if os.path.exists(filename):			os.remove(filename)		plt.savefig(filename)		plt.close('all')		return filename		